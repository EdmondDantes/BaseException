<?php
namespace Exceptions;

/**
 * Test class for BaseException.
 * Generated by PHPUnit on 2012-02-12 at 19:39:38.
 */
class BaseExceptionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Тестовые данные для исключения
     * @var array
     */
    protected $test_data;

    /**
     * Информация об исключении
     * @var array
     */
    protected $test_base_data;

    /**
     * Исключение
     * @var BaseException
     */
    protected $BaseException;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->test_data = array
        (
            'level'         => BaseExceptionI::CRIT,
            'ident'         => 'test_ident',
            'exdata'        => array(1,2,'string')
        );

        $this->test_base_data = array
        (
            'message'   => 'test message',
            'code'      => 11223344,
            'previous'  => new \Exception('previous message', 123)
        );

        $this->BaseException = new BaseException(array_merge($this->test_data, $this->test_base_data));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers Exceptions\BaseException::__construct
     * @covers Exceptions\BaseException::set_loggable
     * @covers Exceptions\BaseException::is_loggable
     */
    public function test__construct()
    {
        $previous = new \Exception('ex', 2);

        $e = new BaseException('test', 10, $previous);

        $this->assertEquals('test', $e->getMessage(), '$e->getMessage() failed');
        $this->assertEquals(10, $e->getCode(), '$e->getCode() failed');
        $this->assertTrue(($previous === $e->getPrevious()), '$e->getPrevious() failed');

        $e = new BaseException($this->test_base_data);
        $this->assertEquals($this->test_base_data['message'], $e->getMessage(), '$e->getMessage() failed');
        $this->assertEquals($this->test_base_data['code'], $e->getCode(), '$e->getCode() failed');
        $this->assertTrue(($this->test_base_data['previous'] === $e->getPrevious()), '$e->getPrevious() failed');

        $e = new BaseException(array_merge($this->test_data, $this->test_base_data));
        $this->assertEquals($this->test_base_data['message'], $e->getMessage(), '$e->getMessage() failed');
        $this->assertEquals($this->test_base_data['code'], $e->getCode(), '$e->getCode() failed');
        $this->assertTrue(($this->test_base_data['previous'] === $e->getPrevious()), '$e->getPrevious() failed');
    }

    /**
     * @covers Exceptions\BaseException::__construct
     * @covers Exceptions\BaseException::get_previous
     */
    public function test__construct_as_container()
    {
        // 1. Случай контейнер для исключения \Exception
        $exception = new \UnderflowException
        (
            $this->test_base_data['message'],
            $this->test_base_data['code']
        );

        $e = new BaseException($exception);

        $this->assertEquals($exception->getMessage(), $e->getMessage(), '$e->getMessage() failed');
        $this->assertEquals($exception->getCode(), $e->getCode(), '$e->getCode() failed');
        $this->assertEquals($exception->getFile(), $e->getFile(), '$e->getFile() failed');
        $this->assertEquals($exception->getLine(), $e->getLine(), '$e->getLine() failed');
        $this->assertTrue(($exception === $e->getPrevious()), '$e->getPrevious() failed');
        $this->assertTrue(($exception === $e->get_previous()), '$e->get_previous() failed');

        // 2. Случай контейнер для BaseExceptionI
        $exception = new ClassNotExist('my_class');

        $e = new BaseException($exception);

        $this->assertEquals('', $e->getMessage(), '$e->getMessage() failed');
        $this->assertEquals(0, $e->getCode(), '$e->getCode() failed');
        $this->assertTrue(($exception === $e->getPrevious()), '$e->getPrevious() failed');
        $this->assertTrue(($exception === $e->get_previous()), '$e->get_previous() failed');

        // 3. Случай контейнер для BaseExceptionI, но используется класс ошибки
        $exception = new Errors\Error(1, 'message', __FILE__, __LINE__);

        $e = new BaseException($exception);

        $this->assertEquals('', $e->getMessage(), '$e->getMessage() failed');
        $this->assertEquals(0, $e->getCode(), '$e->getCode() failed');
        $this->assertTrue(($exception === $e->get_previous()), '$e->get_previous() failed');
    }

    /**
     * @covers Exceptions\BaseException::set_loggable
     * @covers Exceptions\BaseException::is_loggable
     */
    public function testSet_loggable()
    {
        $this->BaseException->set_loggable(true);
        $this->assertTrue($this->BaseException->is_loggable(), 'Loggable flag must be TRUE');

        $this->BaseException->set_loggable(false);
        $this->assertFalse($this->BaseException->is_loggable(), 'Loggable flag must be FALSE');

        $this->BaseException->set_loggable(true);
        $this->assertTrue($this->BaseException->is_loggable(), 'Loggable flag must be TRUE');
    }

    /**
     * @covers Exceptions\BaseException::get_level
     */
    public function testGet_level()
    {
        $this->assertEquals
        (
            $this->test_data['level'],
            $this->BaseException->get_level(),
            'BaseException level must be BaseExceptionI::CRIT'
        );
    }

    /**
     * @covers Exceptions\BaseException::get_source
     * @covers Exceptions\BaseException::get_source_for
     */
    public function testGet_source()
    {
        $this->assertEquals(__CLASS__.'->setUp', implode('', $this->BaseException->get_source()));
    }

    /**
     * @covers Exceptions\BaseException::get_data
     */
    public function testGet_data()
    {
        $data = $this->BaseException->get_data();

        $this->assertTrue(is_array($data), 'data must be array');

        foreach($this->test_data as $key => $value)
        {
            $this->assertArrayHasKey($key, $data);
            $this->assertEquals($value, $data[$key]);
            unset($data[$key]);
        }

        $this->assertTrue(count($data) === 0, 'Data has contain unknown elements');
    }

    /**
     * @covers Exceptions\BaseException::to_array
     * @covers Exceptions\BaseException::get_source_for
     */
    public function testTo_array()
    {
        $data = $this->BaseException->to_array();

        $mockup = array
        (
            'type'      => 'Exceptions\BaseException',
            'source'    => ['source' => get_class($this), 'type' => '->', 'function' => 'setUp'],
            'message'   => $this->test_base_data['message'],
            'code'      => $this->test_base_data['code'],
            'data'      => ''
        );

        $this->assertTrue(is_array($data), 'data must be array');

        foreach($mockup as $main_key => $main_value)
        {
            $this->assertArrayHasKey($main_key, $data);

            if('data' === $main_key)
            {
                foreach($this->test_data as $key => $value)
                {
                    $this->assertArrayHasKey($key, $data['data']);
                    $this->assertEquals($value, $data['data'][$key]);
                }
            }
            elseif('source' === $main_key)
            {
                $this->assertEquals(serialize($main_value), serialize($data[$main_key]));
            }
            else
            {
                $this->assertEquals($main_value, $data[$main_key]);
            }
            unset($data[$main_key]);
        }

        $this->assertTrue(count($data) === 0, 'Data has contain unknown elements');
    }

    /**
     * Тест to_array для исключения-контейнера
     */
    public function testTo_array_for_container()
    {
        $exception  = new LoggableException(new \Exception('test', 2));

        $data       = $exception->to_array();

        $mockup = array
        (
            'type'      => 'Exception',
            'source'    => ['source' => get_class($this), 'type' => '->', 'function' => 'testTo_array_for_container'],
            'message'   => 'test',
            'code'      => 2,
            'data'      => [],
            'container' => 'Exceptions\LoggableException'
        );

        $this->assertTrue(is_array($data), 'data must be array');

        foreach($mockup as $main_key => $main_value)
        {
            $this->assertArrayHasKey($main_key, $data);

            if('data' === $main_key)
            {
                $this->assertTrue(is_array($data['data']), 'data[data] must be array');
            }
            elseif('source' === $main_key)
            {
                $this->assertEquals(serialize($main_value), serialize($data[$main_key]));
            }
            else
            {
                $this->assertEquals($main_value, $data[$main_key]);
            }
            unset($data[$main_key]);
        }

        $this->assertTrue(count($data) === 0, 'Data has contain unknown elements');
    }

    /**
     * @covers Exceptions\BaseException::errors_to_array
     */
    public function testErrors_to_array()
    {
        // Тест на одиночное исключение
        $exceptions = BaseException::errors_to_array
        (
            new BaseException
            (
                array
                (
                    'message' => 'test message1',
                    'code'    => 5,
                    'exdata'  => array(2,3,4)
                )
            )
        );

        $this->assertTrue(is_array($exceptions), '$exceptions must be array');
        $this->assertTrue(count($exceptions) === 1, '$exceptions must have 1 elements');

        $res = array_shift($exceptions);

        $this->assertArrayHasKey('message', $res);
        $this->assertArrayHasKey('code', $res);
        $this->assertArrayHasKey('data', $res);
        $this->assertArrayHasKey('exdata', $res['data']);

        $errors = array
        (
            new BaseException
            (
                array
                (
                    'message' => 'test message1',
                    'code'    => 5,
                    'exdata'  => array(2,3,4)
                )
            ),
            new LoggableException
            (
                array
                (
                    'message' => 'test message2',
                    'code'    => 6,
                    'exdata'  => array(3,2,1)
                )
            ),
            new \Exception('test message3', 7),
            new BaseException('test message4',8)
        );

        $exceptions = BaseException::errors_to_array($errors);

        $this->assertTrue(is_array($exceptions), '$exceptions must be array');
        $this->assertTrue(count($exceptions) === 4, '$exceptions must have three elements');

        $res = array_shift($exceptions);

        $this->assertArrayHasKey('message', $res);
        $this->assertArrayHasKey('code', $res);
        $this->assertArrayHasKey('data', $res);

        $this->assertEquals('test message1', $res['message']);
        $this->assertEquals(5, $res['code']);
        $this->assertTrue
        (
            isset($res['data']['exdata']) &&
            is_array($res['data']['exdata']) &&
            implode('|', $res['data']['exdata']) === '2|3|4',
            'exdata failed'
        );

        $res = array_shift($exceptions);

        $this->assertArrayHasKey('message', $res);
        $this->assertArrayHasKey('code', $res);
        $this->assertArrayHasKey('data', $res);

        $this->assertEquals('test message2', $res['message']);
        $this->assertEquals(6, $res['code']);
        $this->assertTrue
        (
            isset($res['data']['exdata']) &&
            is_array($res['data']['exdata']) &&
            implode('|', $res['data']['exdata']) === '3|2|1',
            'exdata failed'
        );

        $res = array_shift($exceptions);

        $this->assertArrayHasKey('message', $res);
        $this->assertArrayHasKey('code', $res);
        $this->assertArrayHasKey('data', $res);

        $this->assertEquals('test message3', $res['message']);
        $this->assertEquals(7, $res['code']);

        $res = array_shift($exceptions);

        $this->assertArrayHasKey('message', $res);
        $this->assertArrayHasKey('code', $res);
        $this->assertArrayHasKey('data', $res);

        $this->assertEquals('test message4', $res['message']);
        $this->assertEquals(8, $res['code']);

    }

    /**
     * @covers Exceptions\BaseException::array_to_errors
     */
    public function testArray_to_errors()
    {
        $array = array();

        for($i=0;$i<3;$i++)
        {
            $array[] = array
            (
                'message' => 'test message'.($i+5),
                'code'    => ($i+10),
                'exdata'  => ($i-10)
            );
        }

        $results = BaseException::array_to_errors($array);

        $i = 0;
        foreach($results as $exception)
        {
            $this->assertInstanceOf('\Exceptions\BaseExceptionI', $exception);
            $this->assertEquals('test message'.($i+5), $exception->getMessage(), '$exception->getMessage() failed');
            $this->assertEquals(($i+10), $exception->getCode(), '$exception->getCode() failed');
            $data = $exception->get_data();
            $this->assertTrue(is_array($data), '$exception.data must be array');
            $this->assertArrayHasKey('exdata', $data, '$exception.data.exdata no exists');
            $this->assertEquals(($i-10), $data['exdata'], '$exception.data.exdata failed');

            $i++;
        }

    }

    /**
     * @covers Exceptions\BaseException::errors_to_array
     * @expectedException \UnexpectedValueException
     * @expectedExceptionMessage $array must be array
     */
    public function testArray_to_errors_not_array()
    {
        BaseException::array_to_errors('not array');
    }

    /**
     * @covers Exceptions\BaseException::errors_to_array
     * @expectedException \UnexpectedValueException
     * @expectedExceptionMessage $error must be array
     */
    public function testArray_to_errors_error()
    {
        BaseException::array_to_errors(array(1,2,3));
    }

}

?>
